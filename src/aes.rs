#![allow(dead_code)]

const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

const INV_SBOX: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d 
];

const RCON: [u8; 11] = [
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
];

type State = [[u8; 4]; 4];

fn gmul(x: u8, y: u8) -> u8 {
    let mut res = 0u8;
    let mut a = x;
    let mut b = y;

    for _ in 0..8 {
        if b & 1 != 0 {
            res ^= a;
        }
        let carry = a & 0x80;
        a <<= 1;
        if carry != 0 {
            a ^= 0x1B; // reduce by irreducible polynomial
        }
        b >>= 1;
    }

    res
}

fn byte_sub(state: &mut State) {
    for r in state.iter_mut() {
        for b in r.iter_mut() {
            *b = SBOX[*b as usize];
        }
    }
}

fn inv_byte_sub(state: &mut State) {
    for r in state.iter_mut() {
        for b in r.iter_mut() {
            *b = INV_SBOX[*b as usize];
        }
    }
}

fn shift_rows(state: &mut State) {
    state[1].rotate_left(1);
    state[2].rotate_left(2);
    state[3].rotate_left(3);
}


fn inv_shift_rows(state: &mut State) {
    state[1].rotate_right(1);
    state[2].rotate_right(2);
    state[3].rotate_right(3);
}



fn mix_column(state: &mut State) {
    for c in 0..4 {
        let s0 = state[0][c];
        let s1 = state[1][c];
        let s2 = state[2][c];
        let s3 = state[3][c];
        state[0][c] = gmul(s0, 2) ^ gmul(s1, 3) ^ s2 ^ s3;
        state[1][c] = s0 ^ gmul(s1, 2) ^ gmul(s2, 3) ^ s3;
        state[2][c] = s0 ^ s1 ^ gmul(s2, 2) ^ gmul(s3, 3);
        state[3][c] = gmul(s0, 3) ^ s1 ^ s2 ^ gmul(s3, 2);
    }
}

fn inv_mix_column(state: &mut State) {
    for c in 0..4 {
        let s0 = state[0][c];
        let s1 = state[1][c];
        let s2 = state[2][c];
        let s3 = state[3][c];
        state[0][c] = gmul(s0, 0x0e) ^ gmul(s1, 0x0b) ^ gmul(s2, 0x0d) ^ gmul(s3, 0x09);
        state[1][c] = gmul(s0, 0x09) ^ gmul(s1, 0x0e) ^ gmul(s2, 0x0b) ^ gmul(s3, 0x0d);
        state[2][c] = gmul(s0, 0x0d) ^ gmul(s1, 0x09) ^ gmul(s2, 0x0e) ^ gmul(s3, 0x0b);
        state[3][c] = gmul(s0, 0x0b) ^ gmul(s1, 0x0d) ^ gmul(s2, 0x09) ^ gmul(s3, 0x0e);
    }
}


fn add_round_key(state: &mut State, round_key_words: &[[u8; 4]; 4]) {
    for r in 0..4 {
        for c in 0..4 {
            state[r][c] ^= round_key_words[c][r];
        }
    }
}

pub fn block_enc(block: [[u8; 4]; 4], key: [[u8; 4]; 4]) -> [[u8; 4]; 4] {
    let mut state = block;
    let rks = key_expansion(key);

    add_round_key(&mut state, &[rks[0], rks[1], rks[2], rks[3]]);

    for i in 1..10 {
        byte_sub(&mut state);
        shift_rows(&mut state);
        mix_column(&mut state);
        add_round_key(
            &mut state,
            &[rks[i * 4], rks[i * 4 + 1], rks[i * 4 + 2], rks[i * 4 + 3]],
        );
    }

    byte_sub(&mut state);
    shift_rows(&mut state);
    add_round_key(
        &mut state,
        &[
            rks[10 * 4],
            rks[10 * 4 + 1],
            rks[10 * 4 + 2],
            rks[10 * 4 + 3],
        ],
    );

    state
}

pub fn block_dec(block: [[u8; 4]; 4], key: [[u8; 4]; 4]) -> [[u8; 4]; 4] {
    let mut state = block;
    let rks = key_expansion(key);

    add_round_key(&mut state, &[rks[40], rks[41], rks[42], rks[43]]);

    for i in (1..10).rev() {
        inv_shift_rows(&mut state);
        inv_byte_sub(&mut state);
        add_round_key(
            &mut state,
            &[rks[i * 4], rks[i * 4 + 1], rks[i * 4 + 2], rks[i * 4 + 3]],
        );
        inv_mix_column(&mut state);

    }

        inv_shift_rows(&mut state);
        inv_byte_sub(&mut state);
    add_round_key(
        &mut state,
        &[
            rks[0],
            rks[1],
            rks[2],
            rks[3],
        ],
    );

    state
}

// nr = 10 = number of rounds
// nk = 4 = number of cols in cipher key divided by 32
// nb = 4 = block length divided by 32
// cf. Table 1 https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf
pub fn key_expansion(key: [[u8; 4]; 4]) -> [[u8; 4]; 44] {
    let mut exp_key: [[u8; 4]; 44] = [[0u8; 4]; 44];
    let mut temp;

    for i in 0..4 {
        exp_key[i] = key[i];
    }

    for i in 4..44 {
        temp = exp_key[i - 1];
        if i % 4 == 0 {
            temp.rotate_left(1);
            for j in 0..4 {
                temp[j] = SBOX[temp[j] as usize];
            }
            let rcon = [RCON[i / 4], 0, 0, 0];
            temp = wxor(temp, rcon)
        }
        exp_key[i] = wxor(exp_key[i - 4], temp);
    }
    exp_key
}

fn wxor(w1: [u8; 4], w2: [u8; 4]) -> [u8; 4] {
    let mut res = [0u8; 4];
    for i in 0..4 {
        res[i] = w1[i] ^ w2[i];
    }
    res
}

// Convert 16 bytes to 4x4 state matrix (FIPS-197 column-major order)
// Input bytes: [b0, b1, b2, ..., b15]
// State matrix: s[r][c] = b[r + 4*c]
pub fn bytes_to_state(bytes: &[u8; 16]) -> [[u8; 4]; 4] {
    let mut state = [[0u8; 4]; 4];
    for r in 0..4 {
        for c in 0..4 {
            state[r][c] = bytes[r + 4 * c];
        }
    }
    state
}

// Convert 4x4 state matrix to 16 bytes (FIPS-197 column-major order)
// State matrix: s[r][c] -> bytes[r + 4*c]
pub fn state_to_bytes(state: &[[u8; 4]; 4]) -> [u8; 16] {
    let mut bytes = [0u8; 16];
    for r in 0..4 {
        for c in 0..4 {
            bytes[r + 4 * c] = state[r][c];
        }
    }
    bytes
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_gmul() {
        assert_eq!(gmul(0x53, 0x01), 0x53);
        assert_eq!(gmul(0xCA, 0x01), 0xCA);

        assert_eq!(gmul(0x53, 0x02), 0xA6);
        assert_eq!(gmul(0x87, 0x02), 0x15);

        // Test multiplication by 3
        assert_eq!(gmul(0x53, 0x03), 0xF5);

        // Test with zero
        assert_eq!(gmul(0x00, 0x53), 0x00);
        assert_eq!(gmul(0x53, 0x00), 0x00);
    }

    #[test]
    fn test_byte_sub() {
        let mut state = [
            [0x19, 0xa0, 0x9a, 0xe9],
            [0x3d, 0xf4, 0xc6, 0xf8],
            [0xe3, 0xe2, 0x8d, 0x48],
            [0xbe, 0x2b, 0x2a, 0x08],
        ];

        let expected = [
            [0xd4, 0xe0, 0xb8, 0x1e],
            [0x27, 0xbf, 0xb4, 0x41],
            [0x11, 0x98, 0x5d, 0x52],
            [0xae, 0xf1, 0xe5, 0x30],
        ];

        byte_sub(&mut state);

        assert_eq!(state, expected);
    }

    #[test]
    fn test_shift_rows() {
        let mut state = [
            [0xd4, 0xe0, 0xb8, 0x1e],
            [0x27, 0xbf, 0xb4, 0x41],
            [0x11, 0x98, 0x5d, 0x52],
            [0xae, 0xf1, 0xe5, 0x30],
        ];

        let expected = [
            [0xd4, 0xe0, 0xb8, 0x1e],
            [0xbf, 0xb4, 0x41, 0x27],
            [0x5d, 0x52, 0x11, 0x98],
            [0x30, 0xae, 0xf1, 0xe5],
        ];

        shift_rows(&mut state);

        assert_eq!(state, expected)
    }

    #[test]
    fn test_mix_column() {
        let mut state: [[u8; 4]; 4] = [
            [0xd4, 0xe0, 0xb8, 0x1e],
            [0xbf, 0xb4, 0x41, 0x27],
            [0x5d, 0x52, 0x11, 0x98],
            [0x30, 0xae, 0xf1, 0xe5],
        ];

        let expected: [[u8; 4]; 4] = [
            [0x04, 0xe0, 0x48, 0x28],
            [0x66, 0xcb, 0xf8, 0x06],
            [0x81, 0x19, 0xd3, 0x26],
            [0xe5, 0x9a, 0x7a, 0x4c],
        ];

        mix_column(&mut state);

        assert_eq!(state, expected);
    }

    #[test]
    fn test_round_key() {
        let mut state: [[u8; 4]; 4] = [
            [0x04, 0xe0, 0x48, 0x28],
            [0x66, 0xcb, 0xf8, 0x06],
            [0x81, 0x19, 0xd3, 0x26],
            [0xe5, 0x9a, 0x7a, 0x4c],
        ];

        let rk = [
            [0xa0, 0xfa, 0xfe, 0x17],
            [0x88, 0x54, 0x2c, 0xb1],
            [0x23, 0xa3, 0x39, 0x39],
            [0x2a, 0x6c, 0x76, 0x05],
        ];

        let expected = [
            [0xa4, 0x68, 0x6b, 0x02],
            [0x9c, 0x9f, 0x5b, 0x6a],
            [0x7f, 0x35, 0xea, 0x50],
            [0xf2, 0x2b, 0x43, 0x49],
        ];

        add_round_key(&mut state, &rk);

        assert_eq!(state, expected);
    }

    #[test]
    fn test_key_expansion_aes128_vector() {
        // Test vector from FIPS-197, Appendix A.1 (AES-128 key expansion)
        let key: [[u8; 4]; 4] = [
            [0x2b, 0x7e, 0x15, 0x16],
            [0x28, 0xae, 0xd2, 0xa6],
            [0xab, 0xf7, 0x15, 0x88],
            [0x09, 0xcf, 0x4f, 0x3c],
        ];

        let expected: [[u8; 4]; 44] = [
            [0x2b, 0x7e, 0x15, 0x16],
            [0x28, 0xae, 0xd2, 0xa6],
            [0xab, 0xf7, 0x15, 0x88],
            [0x09, 0xcf, 0x4f, 0x3c],
            [0xa0, 0xfa, 0xfe, 0x17],
            [0x88, 0x54, 0x2c, 0xb1],
            [0x23, 0xa3, 0x39, 0x39],
            [0x2a, 0x6c, 0x76, 0x05],
            [0xf2, 0xc2, 0x95, 0xf2],
            [0x7a, 0x96, 0xb9, 0x43],
            [0x59, 0x35, 0x80, 0x7a],
            [0x73, 0x59, 0xf6, 0x7f],
            [0x3d, 0x80, 0x47, 0x7d],
            [0x47, 0x16, 0xfe, 0x3e],
            [0x1e, 0x23, 0x7e, 0x44],
            [0x6d, 0x7a, 0x88, 0x3b],
            [0xef, 0x44, 0xa5, 0x41],
            [0xa8, 0x52, 0x5b, 0x7f],
            [0xb6, 0x71, 0x25, 0x3b],
            [0xdb, 0x0b, 0xad, 0x00],
            [0xd4, 0xd1, 0xc6, 0xf8],
            [0x7c, 0x83, 0x9d, 0x87],
            [0xca, 0xf2, 0xb8, 0xbc],
            [0x11, 0xf9, 0x15, 0xbc],
            [0x6d, 0x88, 0xa3, 0x7a],
            [0x11, 0x0b, 0x3e, 0xfd],
            [0xdb, 0xf9, 0x86, 0x41],
            [0xca, 0x00, 0x93, 0xfd],
            [0x4e, 0x54, 0xf7, 0x0e],
            [0x5f, 0x5f, 0xc9, 0xf3],
            [0x84, 0xa6, 0x4f, 0xb2],
            [0x4e, 0xa6, 0xdc, 0x4f],
            [0xea, 0xd2, 0x73, 0x21],
            [0xb5, 0x8d, 0xba, 0xd2],
            [0x31, 0x2b, 0xf5, 0x60],
            [0x7f, 0x8d, 0x29, 0x2f],
            [0xac, 0x77, 0x66, 0xf3],
            [0x19, 0xfa, 0xdc, 0x21],
            [0x28, 0xd1, 0x29, 0x41],
            [0x57, 0x5c, 0x00, 0x6e],
            [0xd0, 0x14, 0xf9, 0xa8],
            [0xc9, 0xee, 0x25, 0x89],
            [0xe1, 0x3f, 0x0c, 0xc8],
            [0xb6, 0x63, 0x0c, 0xa6],
        ];

        let expanded = key_expansion(key);

        assert_eq!(expanded, expected);
    }

    #[test]
    fn test_block_enc() {
        let input = [
            0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37,
            0x07, 0x34,
        ];
        let key = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ];

        let input_matrix = bytes_to_state(&input);

        let key_matrix = [
            [key[0], key[1], key[2], key[3]],
            [key[4], key[5], key[6], key[7]],
            [key[8], key[9], key[10], key[11]],
            [key[12], key[13], key[14], key[15]],
        ];

        let encrypted = block_enc(input_matrix, key_matrix);

        assert_eq!(
            state_to_bytes(&encrypted)
                .iter()
                .map(|b| format!("{:02x}", b))
                .collect::<Vec<_>>()
                .join(""),
            "3925841d02dc09fbdc118597196a0b32"
        );
    }

    #[test]
    fn test_enc_dec() {
        let input = [
            [0x6b, 0xc1, 0xbe, 0xe2],
            [0x2e, 0x40, 0x9f, 0x96],
            [0xe9, 0x3d, 0x7e, 0x11],
            [0x73, 0x93, 0x17, 0x2a],
        ];

        let key = [
            [0xae, 0x68, 0x52, 0xf8],
            [0x12, 0x10, 0x67, 0xcc],
            [0x4d, 0xb6, 0x6e, 0x3e],
            [0x94, 0x61, 0x4e, 0x46],
        ];

        let encrypted = block_enc(input, key);
        let decrypted = block_dec(encrypted, key);

        assert_eq!(input, decrypted);
    }

}
