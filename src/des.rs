const IP: [u8; 64] = [
    58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61,
    53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7,
];

const IPI: [u8; 64] = [
    40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25,
];

const SHIFTS: [u8; 16] = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

const PC2: [u8; 48] = [
    14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52,
    31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,
];

const PC1: [u8; 56] = [
    57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60,
    52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4,
];

pub fn perm<T, const N: usize>(x: T, t: [u8; N], w: u8) -> u64
where
    T: Copy + Into<u64>,
{
    let x_u64: u64 = x.into();
    let mut out: u64 = 0u64;
    for (i, &src) in t.iter().enumerate() {
        let bit = (x_u64 >> (w - src)) & 1;
        out |= bit << (N - i - 1);
    }
    out
}

pub fn rot28(x: u64, s: u8) -> u64 {
    (x << s | x >> (28 - s)) & 0xFFFFFFF
}

pub fn key_schedule(k: u64) -> [u64; 16] {
    let pk = perm(k, PC1, 64);
    let mut rk: [u64; 16] = [0; 16];
    let mut c = (pk >> 28) & 0xFFFFFFF;
    let mut d = pk & 0xFFFFFFF;

    for i in 0..16 {
        c = rot28(c, SHIFTS[i]);
        d = rot28(d, SHIFTS[i]);
        rk[i] = perm((c << 28) | d, PC2, 56);
    }
    rk
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_key_schedule_matches_reference() {
        let expected: [u64; 16] = [
            0b000110_110000_001011_101111_111111_000111_000001_110010,
            0b011110_011010_111011_011001_110110_111100_100111_100101,
            0b010101_011111_110010_001010_010000_101100_111110_011001,
            0b011100_101010_110111_010110_110110_110011_010100_011101,
            0b011111_001110_110000_000111_111010_110101_001110_101000,
            0b011000_111010_010100_111110_010100_000111_101100_101111,
            0b111011_001000_010010_110111_111101_100001_100010_111100,
            0b111101_111000_101000_111010_110000_010011_101111_111011,
            0b111000_001101_101111_101011_111011_011110_011110_000001,
            0b101100_011111_001101_000111_101110_100100_011001_001111,
            0b001000_010101_111111_010011_110111_101101_001110_000110,
            0b011101_010111_000111_110101_100101_000110_011111_101001,
            0b100101_111100_010111_010001_111110_101011_101001_000001,
            0b010111_110100_001110_110111_111100_101110_011100_111010,
            0b101111_111001_000110_001101_001111_010011_111100_001010,
            0b110010_110011_110110_001011_000011_100001_011111_110101,
        ];
        let actual = key_schedule(1383827165325090801);
        assert_eq!(actual, expected);
    }
}
